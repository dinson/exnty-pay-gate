// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	contract "payment-gateway/paymentprovider/contract"

	mock "github.com/stretchr/testify/mock"
)

// PaymentProvider is an autogenerated mock type for the PaymentProvider type
type PaymentProvider struct {
	mock.Mock
}

// Deposit provides a mock function with given fields: ctx, req
func (_m *PaymentProvider) Deposit(ctx context.Context, req *contract.DepositRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Deposit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *contract.DepositRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Withdraw provides a mock function with given fields: ctx, req
func (_m *PaymentProvider) Withdraw(ctx context.Context, req *contract.WithdrawRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Withdraw")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *contract.WithdrawRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPaymentProvider creates a new instance of PaymentProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentProvider {
	mock := &PaymentProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
