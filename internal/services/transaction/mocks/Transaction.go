// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	contract "payment-gateway/internal/services/transaction/contract"

	mock "github.com/stretchr/testify/mock"
)

// Transaction is an autogenerated mock type for the Transaction type
type Transaction struct {
	mock.Mock
}

// Deposit provides a mock function with given fields: ctx, req
func (_m *Transaction) Deposit(ctx context.Context, req *contract.DepositRequest) (*contract.DepositResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Deposit")
	}

	var r0 *contract.DepositResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *contract.DepositRequest) (*contract.DepositResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *contract.DepositRequest) *contract.DepositResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contract.DepositResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *contract.DepositRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: ctx, req
func (_m *Transaction) UpdateStatus(ctx context.Context, req *contract.UpdateStatusRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *contract.UpdateStatusRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Withdraw provides a mock function with given fields: ctx, req
func (_m *Transaction) Withdraw(ctx context.Context, req *contract.WithdrawRequest) (*contract.WithdrawResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Withdraw")
	}

	var r0 *contract.WithdrawResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *contract.WithdrawRequest) (*contract.WithdrawResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *contract.WithdrawRequest) *contract.WithdrawResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contract.WithdrawResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *contract.WithdrawRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransaction creates a new instance of Transaction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransaction(t interface {
	mock.TestingT
	Cleanup(func())
}) *Transaction {
	mock := &Transaction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
