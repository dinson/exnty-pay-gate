// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"
	db "payment-gateway/db"

	mock "github.com/stretchr/testify/mock"
)

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

// CreateCountry provides a mock function with given fields: ctx, country
func (_m *DB) CreateCountry(ctx context.Context, country db.Country) error {
	ret := _m.Called(ctx, country)

	if len(ret) == 0 {
		panic("no return value specified for CreateCountry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.Country) error); ok {
		r0 = rf(ctx, country)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateGateway provides a mock function with given fields: ctx, gateway
func (_m *DB) CreateGateway(ctx context.Context, gateway db.Gateway) error {
	ret := _m.Called(ctx, gateway)

	if len(ret) == 0 {
		panic("no return value specified for CreateGateway")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.Gateway) error); ok {
		r0 = rf(ctx, gateway)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTransaction provides a mock function with given fields: ctx, transaction
func (_m *DB) CreateTransaction(ctx context.Context, transaction *db.Transaction) (int, error) {
	ret := _m.Called(ctx, transaction)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransaction")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *db.Transaction) (int, error)); ok {
		return rf(ctx, transaction)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *db.Transaction) int); ok {
		r0 = rf(ctx, transaction)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *db.Transaction) error); ok {
		r1 = rf(ctx, transaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *DB) CreateUser(ctx context.Context, user db.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, db.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCountries provides a mock function with given fields: ctx
func (_m *DB) GetCountries(ctx context.Context) ([]db.Country, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCountries")
	}

	var r0 []db.Country
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]db.Country, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []db.Country); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Country)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGateways provides a mock function with given fields: ctx
func (_m *DB) GetGateways(ctx context.Context) ([]db.Gateway, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetGateways")
	}

	var r0 []db.Gateway
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]db.Gateway, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []db.Gateway); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Gateway)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSupportedCountriesByGateway provides a mock function with given fields: ctx, gatewayID
func (_m *DB) GetSupportedCountriesByGateway(ctx context.Context, gatewayID int) ([]db.Country, error) {
	ret := _m.Called(ctx, gatewayID)

	if len(ret) == 0 {
		panic("no return value specified for GetSupportedCountriesByGateway")
	}

	var r0 []db.Country
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]db.Country, error)); ok {
		return rf(ctx, gatewayID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []db.Country); ok {
		r0 = rf(ctx, gatewayID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Country)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, gatewayID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionByID provides a mock function with given fields: ctx, id
func (_m *DB) GetTransactionByID(ctx context.Context, id int) (*db.Transaction, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionByID")
	}

	var r0 *db.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*db.Transaction, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *db.Transaction); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*db.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactions provides a mock function with given fields: ctx
func (_m *DB) GetTransactions(ctx context.Context) ([]db.Transaction, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactions")
	}

	var r0 []db.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]db.Transaction, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []db.Transaction); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: ctx
func (_m *DB) GetUsers(ctx context.Context) ([]db.User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []db.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]db.User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []db.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]db.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCountryGatewaysByPriority provides a mock function with given fields: ctx, countryID
func (_m *DB) ListCountryGatewaysByPriority(ctx context.Context, countryID int) ([]*db.GatewaysForCountry, error) {
	ret := _m.Called(ctx, countryID)

	if len(ret) == 0 {
		panic("no return value specified for ListCountryGatewaysByPriority")
	}

	var r0 []*db.GatewaysForCountry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*db.GatewaysForCountry, error)); ok {
		return rf(ctx, countryID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*db.GatewaysForCountry); ok {
		r0 = rf(ctx, countryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*db.GatewaysForCountry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, countryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTransactionByID provides a mock function with given fields: ctx, id, transaction
func (_m *DB) UpdateTransactionByID(ctx context.Context, id int, transaction *db.Transaction) error {
	ret := _m.Called(ctx, id, transaction)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTransactionByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *db.Transaction) error); ok {
		r0 = rf(ctx, id, transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDB creates a new instance of DB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *DB {
	mock := &DB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
